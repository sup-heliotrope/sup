#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), *%w[.. lib])

require 'xapian'
require 'trollop'
require 'set'

if ENV["SUP_BASE"]
  DATA_DIR    = ENV['SUP_BASE']
else
  dir = ENV['XDG_DATA_HOME'] || File.join(ENV['HOME'], ".local/share")
  DATA_DIR = File.join(dir, 'sup')
end

$opts = Trollop::options do
  version "sup-dump"
  banner <<EOS
Dumps all message state from the sup index to standard out. You can
later use sup-sync --restored --restore <filename> to recover the index.

This tool is primarily useful in the event that a Sup upgrade breaks index
format compatibility.

Usage:
  sup-dump > <filename>
  sup-dump | bzip2 > <filename> # even better
EOS
end

xapian = Xapian::Database.new File.join(DATA_DIR, 'xapian')
version = xapian.get_metadata 'rescue-version'
version = '0' if version.empty?

case version
when '0'
  xapian.postlist('Kmail').each do |x|
    begin
      entry = Marshal.load(xapian.document(x.docid).data)
      puts "#{entry[:message_id]} (#{entry[:labels].sort_by { |l| l.to_s } * ' '})"
    rescue
      $stderr.puts "failed to dump document #{x.docid}"
    end
  end
else
  abort "this sup-dump version doesn't understand your index"
end
